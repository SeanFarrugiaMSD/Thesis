import numpy as np
import pandas as pd
import cv2
import os

List_rows = [
    [
    [(0,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(1,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(2,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(3,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(4,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(5,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(6,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(7,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(8,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(9,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(10,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(11,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(12,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)]
    ],
    [
    [(0,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(1,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(2,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(3,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(4,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(5,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(6,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(7,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(8,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(9,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(10,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(11,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(12,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)]
    ],
    [
    [(0,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(1,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(2,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(3,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(4,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(5,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(6,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(7,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(8,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(9,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(10,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(11,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(12,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)]
    ],
    [
    [(0,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(1,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(2,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(3,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(4,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(5,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(6,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(7,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(8,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(9,0), (983, 845), (983, 868), (1030, 939), (936, 962), (983, 845), (0,0), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 892), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(10,0), (983, 845), (983, 845), (1030, 939), (936, 962), (983, 845), (1030, 939), (0,0), (1077, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(11,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)],
    [(12,0), (983, 845), (983, 845), (1030, 939), (936, 962), (960, 845), (889, 892), (866, 939), (1100, 915), (1006, 1009), (0,0), (1123, 915), (1077, 1033), (0,0), (0,0), (0,0), (0,0), (0,0), (23, 0)]
    ]
]

def seperate_x_y():
    sorted_List = [[[],[]] for i in range(len(List_rows))]

    for x in range(len(List_rows)):
        for y in range(len(List_rows[x])):
            sorted_List[x][0].append(List_rows[x][y][0])
            sorted_List[x][1].append(List_rows[x][y][1])

    List_columns = ["Nose(X)", "Neck(X)", "RShoulder(X)", "RElbow(X)", "RWrist(X)", "LShoulder(X)", "LElbow(X)", "LWrist(X)", "RHip(X)",
                    "RKnee(X)", "RAnkle(X)", "LHip(X)", "LKnee(X)", "LAnkle(X)", "REye(X)", "LEye(X)", "REar(X)", "LEar(X)", "Background(X)",
                    "Nose(Y)", "Neck(Y)", "RShoulder(Y)", "RElbow(Y)", "RWrist(Y)", "LShoulder(Y)", "LElbow(Y)", "LWrist(Y)", "RHip(Y)",
                    "RKnee(Y)", "RAnkle(Y)", "LHip(Y)", "LKnee(Y)", "LAnkle(Y)", "REye(Y)", "LEye(Y)", "REar(Y)", "LEar(Y)", "Background(Y)"]

    np_array_rows = np.array(sorted_List)
    np_array_rows_reshaped = np_array_rows.reshape(np_array_rows.shape[0] , -1)

    np_array_columns = np.array(List_columns)

    return np_array_rows_reshaped, np_array_columns

def x_y_coordinates():

    sorted_List = List_rows.copy()

    for x in range(len(List_rows)):
        for y in range(len(List_rows[x])):
            for z in range(len(List_rows[x][y])):
                sorted_List[x][y][z] = str(List_rows[x][y][z])
                sorted_List[x][y][z] = str(List_rows[x][y][z])

    List_columns = ["Action",

                    "Nose(1)", "Neck(1)", "RShoulder(1)", "RElbow(1)", "RWrist(1)", "LShoulder(1)", "LElbow(1)", "LWrist(1)", "RHip(1)",
                    "RKnee(1)", "RAnkle(1)", "LHip(1)", "LKnee(1)", "LAnkle(1)", "REye(1)", "LEye(1)", "REar(1)", "LEar(1)", "Background(1)",

                    "Nose(2)", "Neck(2)", "RShoulder(2)", "RElbow(2)", "RWrist(2)", "LShoulder(2)", "LElbow(2)", "LWrist(2)", "RHip(2)",
                    "RKnee(2)", "RAnkle(2)", "LHip(2)", "LKnee(2)", "LAnkle(2)", "REye(2)", "LEye(2)", "REar(2)", "LEar(2)", "Background(2)",

                    "Nose(3)", "Neck(3)", "RShoulder(3)", "RElbow(3)", "RWrist(3)", "LShoulder(3)", "LElbow(3)", "LWrist(3)", "RHip(3)",
                    "RKnee(3)", "RAnkle(3)", "LHip(3)", "LKnee(3)", "LAnkle(3)", "REye(3)", "LEye(3)", "REar(3)", "LEar(3)", "Background(3)"
                    ]

    csv_list = []

    for x in range(0,len(sorted_List)):
        for y in range(0,len(sorted_List[x]),3):
            try:
                csv_list.append(["Violent"] + sorted_List[x][y] + sorted_List[x][y + 1] + sorted_List[x][y + 2])
            except:
                break

    np_array_rows = np.array(csv_list)
    np_array_columns = np.array(List_columns)

    return np_array_rows, np_array_columns

#%%

#CSV_ROWS, CSV_COLUMNS =  seperate_x_y()

CSV_ROWS, CSV_COLUMNS =  x_y_coordinates()

df = pd.DataFrame(CSV_ROWS)

if not os.path.isfile('stringTest.csv'):
   df.to_csv('stringTest.csv', index=False, header=CSV_COLUMNS)
else: # else it exists so append without writing the header
   df.to_csv('stringTest.csv', index=False, mode='a', header=False)
